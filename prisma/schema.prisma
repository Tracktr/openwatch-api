// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id           Int                 @id @default(autoincrement())
  title        String
  releaseYear  Int
  availability MovieAvailability[]
}

model StreamingService {
  id           Int                 @id @default(autoincrement())
  name         String
  logoUrl      String
  availability MovieAvailability[]
}

model MovieAvailability {
  id                 Int                    @id @default(autoincrement())
  movie              Movie                  @relation(fields: [movieId], references: [id])
  movieId            Int
  streamingService   StreamingService       @relation(fields: [streamingServiceId], references: [id])
  streamingServiceId Int
  country            String
  upvotes            AvailabilityUpvote[]
  downvotes          AvailabilityDownvote[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  @@unique([movieId, streamingServiceId, country])
}

model AvailabilityUpvote {
  id                  Int               @id @default(autoincrement())
  movieAvailability   MovieAvailability @relation(fields: [movieAvailabilityId], references: [id], onDelete: Cascade)
  movieAvailabilityId Int
  createdAt           DateTime          @default(now())
}

model AvailabilityDownvote {
  id                  Int               @id @default(autoincrement())
  movieAvailability   MovieAvailability @relation(fields: [movieAvailabilityId], references: [id], onDelete: Cascade)
  movieAvailabilityId Int
  createdAt           DateTime          @default(now())
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  googleId      String?        @unique
  applications  Application[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Application {
  id        String   @id @default(uuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  apiKeys   ApiKey[]
}

model ApiKey {
  id            Int         @id @default(autoincrement())
  key           String      @unique
  name          String      @default("Default Key")
  enabled       Boolean     @default(true)
  createdAt     DateTime    @default(now())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}
